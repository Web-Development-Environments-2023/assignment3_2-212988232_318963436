---
openapi: 3.0.0
info:
  title: Recipe API
  description: This API is for the recipe app project in the course "Internet Programing Environments" in the Ben Gurion University.
  contact:
    name: Yuval Gorodissky and Noam Azulay
    email: yuvalgor@post.bgu.ac.il
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://127.0.0.1:3000
    description: SwaggerHub API Auto Mocking
tags:
  - name: user
    description: Operations to manage users
  - name: recipe
    description: Operations to manage recipes
  - name: auth
    description: Operations to manage authentication

paths:
  /users/createRecipe:
    post:
      tags:
        - user
      summary: Create new recipe
      description: This can only be done by the logged in user.
      operationId: createRecipe
      requestBody:
        description: Recipe object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipe"
        required: true
      responses:
        "201":
          description: Recipe created
        "400":
          description: Invalid input
  /users/getRecipes:
    get:
      tags:
        - user
      summary: Get all recipes
      description: Returns all recipes
      operationId: getRecipes
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        "400":
          description: There are no recipes

  /users/deleteRecipe:
    delete:
      tags:
        - user
      summary: Delete recipe by ID
      description: Delete a single recipe
      operationId: deleteRecipeById
      requestBody:
        description: RecipeID that needs to be deleted
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipeid"

        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Recipe not found

  /users/updateRecipe:
    put:
      tags:
        - user
      summary: Update recipe by ID
      description: Update a single recipe
      operationId: updateRecipeById
      requestBody:
        description: Recipe object that needs to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipe"

        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Recipe not found

  /users/setFavoriteRecipe:
    post:
      tags:
        - user
      summary: Set favorite recipe by ID
      description: Set a single recipe as favorite
      operationId: setFavoriteRecipeById
      requestBody:
        description: RecipeID that needs to be set as favorite
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipeid"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Recipe not found

  /users/unsetFavoriteRecipe:
    post:
      tags:
        - user
      summary: Unset favorite recipe by ID
      description: Unset a single recipe as favorite
      operationId: unsetFavoriteRecipeById
      requestBody:
        description: RecipeID that needs to be unset as favorite
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipeid"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Recipe not found
  /users/markAsLike:
    post:
      tags:
        - user
      summary: Mark recipe as like by ID
      description: Mark a single recipe as like
      operationId: markAsLikeById
      requestBody:
        description: RecipeID that needs to be marked as like
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipeid"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Recipe not found
  /users/unmarkAsLike:
    post:
      tags:
        - user
      summary: Unmark recipe as like by ID
      description: Unmark a single recipe as like
      operationId: unmarkAsLikeById
      requestBody:
        description: RecipeID that needs to be unmarked as like
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipeid"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Recipe not found
  /users/getFavoriteRecipes:
    get:
      tags:
        - user
      summary: Get all favorite recipes
      description: Returns all favorite recipes
      operationId: getFavoriteRecipes
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        "400":
          description: There are no favorite recipes
  /users/setSeenRecipe:
    post:
      tags:
        - user
      summary: Set seen recipe by ID
      description: Set a single recipe as seen
      operationId: setSeenRecipeById
      requestBody:
        description: RecipeID that needs to be set as seen
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipeid"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Recipe not found
  /users/getSeenRecipes:
    get:
      tags:
        - user
      summary: Get all seen recipes
      description: Returns all seen recipes
      operationId: getSeenRecipes
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        "400":
          description: There are no seen recipes
  /recipe/getNRandomRecipes{numOfRecipes}:
    get:
      tags:
        - recipe
      summary: Get N random recipes
      description: Returns N random recipes
      operationId: getNRandomRecipes
      parameters:
        - name: numOfRecipes
          in: path
          description: number of recipes to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                description: The recipe objects that was found
                items:
                  $ref: "#/components/schemas/Recipe"
        "400":
          description: Invalid name supplied
        "404":
          description: Recipe not found

  /recipe/getRecipeByName/{recipeName}/{numOfRecipes}:
    get:
      tags:
        - recipe
      summary: Get recipe by name
      description: Returns a single recipe
      operationId: getRecipeByName
      parameters:
        - name: recipeName
          in: path
          description: name of recipe to return
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: numOfRecipes
          in: path
          description: number of recipes to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 5
            enum:
              - 5
              - 10
              - 15
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                description: The recipe objects that was found
                items:
                  $ref: "#/components/schemas/Recipe"
        "400":
          description: Invalid name supplied
        "404":
          description: Recipe not found
  /recipe/getRecipe{recipeId}:
    get:
      tags:
        - recipe
      summary: Get recipe by ID
      description: Returns a single recipe
      operationId: getRecipeById
      parameters:
        - name: recipeId
          in: path
          description: ID of recipe to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
        "400":
          description: Invalid ID supplied
        "404":
          description: Recipe not found
  /Login:
    post:
      tags:
        - auth
      summary: Logs user into the system
      description: Logs user into the system
      operationId: loginUser
      requestBody:
        description: The user object that needs to be logged in
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
        required: true
      responses:
        "200":
          description: "Login successful, The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests."
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                description: The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests.
                example: JSESSIONID=123456789; Path=/; HttpOnly
        "400":
          description: Invalid username/password supplied
  /Register:
    post:
      tags:
        - auth
      summary: Register user
      description: This can only be done by not logged in user.
      operationId: registerUser
      requestBody:
        description: The user object that needs to be registered
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
        required: true
      responses:
        "200":
          description: User created
        "400":
          description: Invalid input
  /Logout:
    get:
      tags:
        - auth
      summary: Logs out current logged in user session
      description: Logs out current logged in user session
      operationId: logoutUser
      responses:
        "200":
          description: successful operation
components:
  schemas:
    Recipeid:
      required:
        - recipeId
      properties:
        recipeId:
          description: Recipe ID
          type: integer
          format: int64
          example: 1
    PreviewRecipe:
      required:
        - glutenFree
        - image
        - likes
        - name
        - readyInMinutes
        - vegiterianLevel
      type: object
      properties:
        image:
          type: object
          description: image of the recipe
        name:
          type: string
          description: name of the recipe
          example: Falafel
        readyInMinutes:
          minimum: 0
          type: integer
          description: time to cook in minutes
          example: 20
        likes:
          minimum: 0
          type: integer
          description: number of likes of the recipe
          example: 20
        vegiterianLevel:
          type: string
          description: "vegiterian, vegan, non vegiterian"
          example: vegiterian
          enum:
            - vegiterian
            - non vegiterian
            - vegan
        glutenFree:
          type: boolean
          description: is the recipe gluten free
          example: true
      description: preview details of the recipe
    Recipe:
      required:
        - recipeId
        - ingredients
        - numberOfServings
        - previewDetails
        - steps
      type: object
      properties:
        recipeId:
          minimum: 0
          type: integer
          description: id of the recipe
          example: 1
        previewDetails:
          $ref: "#/components/schemas/PreviewRecipe"
        ingredients:
          $ref: "#/components/schemas/Ingredients"
        steps:
          type: array
          items:
            $ref: "#/components/schemas/Recipe_steps"
        numberOfServings:
          minimum: 1
          type: integer
          description: number of servings
          example: 4
    Ingredient:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: name of the ingredient
          example: tomato
    Ingredients:
      required:
        - listIngredients
      type: object
      properties:
        listIngredients:
          type: array
          items:
            $ref: "#/components/schemas/Ingredients_listIngredients"
    Step:
      required:
        - description
        - stepNumber
      type: object
      properties:
        stepNumber:
          minimum: 1
          type: integer
          description: number of the step
          example: 1
        description:
          type: string
          description: step of the recipe
          example: Cook the rice for 20 minutes
    User:
      required:
        - country
        - email
        - favoriteRecipes
        - firstName
        - lastName
        - password
        - seenRecipes
        - username
      type: object
      properties:
        username:
          type: string
          description: username of the user
          example: IsrealIsreali
        firstName:
          type: string
          description: first name of the user
          example: Isreal
        lastName:
          type: string
          description: last name of the user
          example: Isreali
        country:
          type: string
          description: country of the user
          example: Isreal
        password:
          type: string
          description: password of the user
          example: "123456"
        email:
          type: string
          description: email of the user
          example: bal@bla.com
        favoriteRecipes:
          type: array
          description: favorite recipes of the user
          items:
            $ref: "#/components/schemas/User_favoriteRecipes"
        seenRecipes:
          type: array
          description: seen recipes of the user
          items:
            $ref: "#/components/schemas/User_favoriteRecipes"
    UserLogin:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
          description: username of the user
          example: IsrealIsreali
        password:
          type: string
          description: password of the user
          example: "123456"
    UserRegister:
      required:
        - country
        - email
        - firstName
        - lastName
        - password
        - username
      type: object
      properties:
        username:
          type: string
          description: username of the user
          example: IsrealIsreali
        firstName:
          type: string
          description: first name of the user
          example: Isreal
        lastName:
          type: string
          description: last name of the user
          example: Isreali
        country:
          type: string
          description: country of the user
          example: Isreal
        password:
          type: string
          description: password of the user
          example: "123456"
        email:
          type: string
          description: email of the user
          example: bal@bla.com
    Recipe_steps:
      properties:
        step:
          $ref: "#/components/schemas/Step"
    Ingredients_listIngredients:
      properties:
        ingredient:
          $ref: "#/components/schemas/Ingredient"
        amount:
          minimum: 1
          type: integer
          description: amount of the ingredient
          example: 4
    User_favoriteRecipes:
      properties:
        recipe:
          $ref: "#/components/schemas/PreviewRecipe"
